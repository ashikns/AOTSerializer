<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace <#= Namespace #>
{
    using AOTSerializer.Common;
    using System;

    public class <#= ResolverName #> : CachedResolver
    {
        public static readonly IResolver Instance = new <#= ResolverName #>();

        private <#= ResolverName #>()
        {

        }

        protected override IFormatter FindFormatter(Type t)
        {
            return <#= ResolverName #>GetFormatterHelper.GetFormatter(t);
        }
    }

    internal static class <#= ResolverName #>GetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static <#= ResolverName #>GetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(<#= RegisterInfos.Length #>)
            {
<# for(var i = 0; i < RegisterInfos.Length; i++) { var x = RegisterInfos[i]; #>
                {typeof(<#= x.FullName #>), <#= i #> },
<# } #>
            };
        }

        internal static IFormatter GetFormatter(Type t)
        {
            if (!lookup.TryGetValue(t, out var key)) { return null; }

            switch (key)
            {
<# for(var i = 0; i < RegisterInfos.Length; i++) { var x = RegisterInfos[i]; #>
                case <#= i #>: return new <#= x.FormatterName #>();
<# } #>
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612