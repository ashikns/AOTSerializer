<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace <#= Namespace #>
{
    using AOTSerializer.Common;
    using AOTSerializer.Internal;
    using AOTSerializer.Json;
    using System;
    using System.Linq;

<# foreach(var objInfo in ObjectSerializationInfos) { #>

    public sealed class <#= objInfo.Name #>Formatter : FormatterBase<<#= objInfo.FullName #>>
    {
        private readonly AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public <#= objInfo.Name #>Formatter()
        {
            this.____keyMapping = new AutomataDictionary()
            {
<# var index = 0; foreach(var x in objInfo.Members) { #>
                { System.Text.Encoding.UTF8.GetString(JsonUtility.GetEncodedPropertyNameWithoutQuotation("<#= x.SerializationName #>")), <#= index++ #> },
<# } #>
            };

            this.____stringByteKeys = new byte[][]
            {
<# index = 0; foreach(var x in objInfo.Members.Where(x => x.IsReadable)) { #>
<# if(index++ == 0) { #>
                JsonUtility.GetEncodedPropertyNameWithBeginObject("<#= x.SerializationName #>").ToArray(),
<# } else { #>
                JsonUtility.GetEncodedPropertyNameWithPrefixValueSeparator("<#= x.SerializationName #>").ToArray(),
<# }} #>
            };
        }

        public override void Serialize(ref byte[] bytes, ref int offset, <#= objInfo.FullName #> value, IResolver resolver)
        {
<# if( objInfo.IsClass) { #>
            if (value == null)
            {
                JsonUtility.WriteNull(ref bytes, ref offset);
                return;
            }
<# } #>
<# index = 0; foreach(var x in objInfo.Members.Where(x => x.IsReadable)) { #>
            JsonUtility.WriteRaw(ref bytes, ref offset, this.____stringByteKeys[<#= index++ #>]);
            <#= x.SerializeMethodString #>;
<# } #>
        }

        public override <#= objInfo.FullName #> Deserialize(byte[] bytes, ref int offset, IResolver resolver)
        {
            if (JsonUtility.ReadIsNull(bytes, ref offset))
            {
<# if( objInfo.IsClass) { #>
                return null;
<# } else { #>
                throw new InvalidOperationException("typecode is null, struct not supported");
<# } #>
            }

<# if( !objInfo.HasConstructor) { #>            
            throw new InvalidOperationException("generated serializer for IInterface does not support deserialize.");
<# } else { #>

<# foreach(var x in objInfo.Members) { #>
            var __<#= x.Name #>__ = default(<#= x.FullTypeName #>);
            var __<#= x.Name #>__b__ = false;
<# } #>

<# if (objInfo.Members.FirstOrDefault(m => m.IsExtensionData) is var extensionMember && extensionMember != null) { #>
            var __additionalDataDict__ = new System.Collections.Generic.Dictionary<<#= extensionMember.TypeArguments #>>();

<# } #>
            JsonUtility.ReadIsBeginObjectWithVerify(bytes, ref offset);
            if (JsonUtility.ReadIsEndObject(bytes, ref offset))
            {
                return new <#= objInfo.GetConstructorString()  #>;
            }
            else
            {
                var stringKey = JsonUtility.ReadPropertyNameSegmentRaw(bytes, ref offset);
                ____keyMapping.TryGetValueSafe(stringKey, out var key);

                switch (key)
                {
<# index =0; foreach(var x in objInfo.Members) { #>
                    case <#= index++ #>:
                        __<#= x.Name #>__ = <#= x.DeserializeMethodString #>;
                        __<#= x.Name #>__b__ = true;
                        break;
<# } #>
<# if (extensionMember == null) { #>
                    default:
                        JsonUtility.ReadNextBlock(bytes, ref offset);
                        break;
<# } else { #>
                    default:
                        var unknownData = JsonUtility.ReadNextBlockSegment(bytes, ref offset);
                        var unknownDataStr = System.Text.Encoding.UTF8.GetString(unknownData.Array, unknownData.Offset, unknownData.Count);
                        unknownDataStr = unknownDataStr.Trim();
                        if (unknownDataStr.StartsWith("\"") && unknownDataStr.EndsWith("\"")) { unknownDataStr = unknownDataStr.Substring(1, unknownDataStr.Length - 2); }
                        __additionalDataDict__.Add(System.Text.Encoding.UTF8.GetString(stringKey.Array, stringKey.Offset, stringKey.Count), unknownDataStr);
                        break;
<# } #>
                }
            }

            while (!JsonUtility.ReadIsEndObject(bytes, ref offset))
            {
                JsonUtility.ReadIsValueSeparatorWithVerify(bytes, ref offset);

                var stringKey = JsonUtility.ReadPropertyNameSegmentRaw(bytes, ref offset);
                ____keyMapping.TryGetValueSafe(stringKey, out var key);

                switch (key)
                {
<# index =0; foreach(var x in objInfo.Members) { #>
                    case <#= index++ #>:
                        __<#= x.Name #>__ = <#= x.DeserializeMethodString #>;
                        __<#= x.Name #>__b__ = true;
                        break;
<# } #>
<# if (extensionMember == null) { #>
                    default:
                        JsonUtility.ReadNextBlock(bytes, ref offset);
                        break;
<# } else { #>
                    default:
                        var unknownData = JsonUtility.ReadNextBlockSegment(bytes, ref offset);
                        var unknownDataStr = System.Text.Encoding.UTF8.GetString(unknownData.Array, unknownData.Offset, unknownData.Count);
                        unknownDataStr = unknownDataStr.Trim();
                        if (unknownDataStr.StartsWith("\"") && unknownDataStr.EndsWith("\"")) { unknownDataStr = unknownDataStr.Substring(1, unknownDataStr.Length - 2); }
                        __additionalDataDict__.Add(System.Text.Encoding.UTF8.GetString(stringKey.Array, stringKey.Offset, stringKey.Count), unknownDataStr);
                        break;
<# } #>
                }
            }

            var ____result = new <#= objInfo.GetConstructorString()  #>;
<# foreach(var x in objInfo.Members.Where(x => x.IsWritable)) { #>
            if (__<#= x.Name #>__b__) ____result.<#= x.Name #> = __<#= x.Name #>__;
<# } #>

<# if (extensionMember != null) { #>
            if(!__<#= extensionMember.Name #>__b__) ____result.<#= extensionMember.Name #>  = __additionalDataDict__;
            
<# } #>
            return ____result;
<# } #>
        }
    }

<# } #>
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612