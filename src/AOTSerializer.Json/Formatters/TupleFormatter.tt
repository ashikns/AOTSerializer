<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using AOTSerializer.Common;
using AOTSerializer.Internal;
using AOTSerializer.Json.Formatters.Internal;
using System;
using System.Linq;

namespace AOTSerializer.Json.Formatters.Internal
{
    // reduce static constructor generate size on generics(especially IL2CPP on Unity)
    internal static class TupleFormatterHelper
    {
<# for(var i = 1; i <= 8; i++) { #>
        internal static readonly byte[][] nameCache<#= i #>;
        internal static readonly AutomataDictionary dictionary<#= i #>;
<# } #>

        static TupleFormatterHelper()
        {
<# for(var i = 1; i <= 8; i++) { Func<int, string> toItem = x => ((x == 8) ? "Rest" : "Item" + x); #>
            nameCache<#= i #> = new byte[][]
            {
<# for (var j = 1; j <= i; j++) { if (j == 1) { #>
                JsonUtility.GetEncodedPropertyNameWithBeginObject("<#= toItem(j) #>").ToArray(),
<# } else if (j == i) { #>
                JsonUtility.GetEncodedPropertyNameWithPrefixValueSeparator("<#= toItem(j) #>").ToArray(),
<# } else { #>
                JsonUtility.GetEncodedPropertyNameWithPrefixValueSeparator("<#= toItem(j) #>").ToArray(),
<# } } #>
            };
            dictionary<#= i #> = new AutomataDictionary
            {
<# for (var j = 1; j <= i; j++) { #>
                { StringEncoding.UTF8.GetString(JsonUtility.GetEncodedPropertyNameWithoutQuotation("<#= toItem(j) #>")), <#= j - 1 #> },
<# } #>
            };
<# } #>
        }
    }
}

namespace AOTSerializer.Json.Formatters
{
<# for(var i = 1; i <= 8; i++) { 
    Func<int, string> toT = x => "T" + ((x == 8) ? "Rest" : x.ToString());
    Func<int, string> toItem = x => ((x == 8) ? "Rest" : "Item" + x);
    var ts = string.Join(", ", Enumerable.Range(1, i).Select(x => toT(x))); 
    var t = "Tuple<" + ts + ">"; 
#>

    public sealed class TupleFormatter<<#= ts #>> : FormatterBase<<#= t #>>
    {
        private static readonly byte[][] cache = TupleFormatterHelper.nameCache<#= i #>;
        private static readonly AutomataDictionary dictionary = TupleFormatterHelper.dictionary<#= i #>;

        public override void Serialize(ref byte[] bytes, ref int offset, <#= t #> value, IResolver resolver)
        {
            if (value == null)
            {
                JsonUtility.WriteNull(ref bytes, ref offset);
                return;
            }

<# for(var j = 1; j <= i; j++) { #>
            JsonUtility.WriteRaw(ref bytes, ref offset, cache[<#= j - 1 #>]);
            resolver.GetFormatterWithVerify<<#= toT(j) #>>().Serialize(ref bytes, ref offset, value.<#= toItem(j) #>, resolver);
<# } #>
            JsonUtility.WriteEndObject(ref bytes, ref offset);
        }

        public override <#= t #> Deserialize(byte[] bytes, ref int offset, IResolver resolver)
        {
            if (JsonUtility.ReadIsNull(bytes, ref offset)) { return null; }

<# for(var j = 1; j <= i; j++) { #>
            <#= toT(j) #> item<#= j #> = default;
<# } #>

            JsonUtility.ReadIsBeginObjectWithVerify(bytes, ref offset);
            while (!JsonUtility.ReadIsEndObject(bytes, ref offset))
            {
                var keyString = JsonUtility.ReadPropertyNameSegmentRaw(bytes, ref offset);
                dictionary.TryGetValue(keyString, out var key);

                switch (key)
                {
<# for(var j = 1; j <= i; j++) { #>
                    case <#= j - 1 #>:
                        item<#= j #> = resolver.GetFormatterWithVerify<<#= toT(j) #>>().Deserialize(bytes, ref offset, resolver);
                        break;
<# } #>
                    default:
                        JsonUtility.ReadNextBlock(bytes, ref offset, out _);
                        break;
                }

                JsonUtility.ReadIsValueSeparatorWithVerify(bytes, ref offset);
            }

            return new Tuple<<#= ts #>>(<#= string.Join(", ", Enumerable.Range(1, i).Select(x => "item" + x)) #>);
        }
    }

<# } #>
}
