<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using AOTSerializer.Common;
using System;

namespace AOTSerializer.MessagePack.Formatters
{
<# for(var i = 1; i <= 8; i++) { 
    Func<int, string> toT = x => "T" + ((x == 8) ? "Rest" : x.ToString());
    Func<int, string> toItem = x => ((x == 8) ? "Rest" : "Item" + x);
    var ts = string.Join(", ", Enumerable.Range(1, i).Select(x => toT(x))); 
    var t = "ValueTuple<" + ts + ">"; 
#>

    public sealed class ValueTupleFormatter<<#= ts #>> : FormatterBase<<#= t #>><#= (t.Contains("TRest") ? " where TRest : struct" : "") #>
    {
        public override void Serialize(ref byte[] bytes, ref int offset, <#= t #> value, IResolver resolver)
        {
            MessagePackBinary.WriteArrayHeader(ref bytes, ref offset, <#= i #>);

<# for(var j = 1; j <= i; j++) { #>
            resolver.GetFormatterWithVerify<<#= toT(j) #>>().Serialize(ref bytes, ref offset, value.<#= toItem(j) #>, resolver);
<# } #>
        }

        public override <#= t #> Deserialize(byte[] bytes, ref int offset, IResolver resolver)
        {
            if (MessagePackBinary.IsNil(bytes, offset))
            {
                throw new InvalidOperationException("Data is Nil, ValueTuple can not be null.");
            }
            else
            {
                var count = MessagePackBinary.ReadArrayHeader(bytes, ref offset);
                if (count != <#= i #>) throw new InvalidOperationException("Invalid ValueTuple count");

<# for(var j = 1; j <= i; j++) { #>
                var item<#= j #> = resolver.GetFormatterWithVerify<<#= toT(j) #>>().Deserialize(bytes, ref offset, resolver);
<# } #>

                return new ValueTuple<<#= ts #>>(<#= string.Join(", ", Enumerable.Range(1, i).Select(x => "item" + x)) #>);
            }
        }
    }

<# } #>
}
